<project name="common" default="compile" basedir=".">
	<property file="${support.dir}/build.properties"/>
	
	<!-- 源文件的路径 -->
	
	<!-- 发布文件路径 -->
	<property name="dist.dir" value="${build.dir}/dist"/>
	<!-- 编译路径 -->
	<path id="build.runtime.classpath">
		<fileset dir="${build.lib.dir}/runtime">
			<include name="**/*.jar"/>
		</fileset>
	</path>
	<path id="build.compile.classpath">
		<fileset dir="${build.lib.dir}/compile">
			<include name="**/*.jar"/>
		</fileset>
	</path>
	<path id="build.test.classpath">
		<fileset dir="${build.lib.dir}/test">
			<include name="**/*.jar"/>
		</fileset>
	</path>
	<!-- ivy 的库路径 -->
	<path id="ivy.path">
		<fileset dir="${support.lib.dir}" includes="ivy*.jar"/>
	</path>
	<taskdef name="ivy-configure" classname="fr.jayasoft.ivy.ant.IvyConfigure"
		classpathref="ivy.path" loaderref="classpath.custom.ant.loaded"/>
	<taskdef name="ivy-resolve" classname="fr.jayasoft.ivy.ant.IvyResolve"
		classpathref="ivy.path" loaderref="classpath.custom.ant.loaded"/>
	<taskdef name="ivy-retrieve" classname="fr.jayasoft.ivy.ant.IvyRetrieve"
		classpathref="ivy.path" loaderref="classpath.custom.ant.loaded"/>
	<taskdef name="ivy-publish" classname="fr.jayasoft.ivy.ant.IvyPublish"
		classpathref="ivy.path" loaderref="classpath.custom.ant.loaded"/>
	
	<!-- ================================= 
	target: 生成eclipse的.classpath文件             
	================================= -->
	<target name="eclipse" depends="resolve"
		description="生成eclipse需要的.classpath文件">
		<pathconvert property="eclipse.classpath" pathsep=" "
			refid="build.classpath">
			
			<mapper>
				<regexpmapper from="${build.lib.dir}/(.*)" to="lib/\1"
					handledirsep="yes"/>
			</mapper>
		</pathconvert>
		<xslt in="${support.ivy.dir}/classpath.xml" out=".classpath"
			style="${support.ivy.dir}/classpath.xsl" force="true">
			<outputproperty name="method" value="xml"/>
			<outputproperty name="standalone" value="yes"/>
			<outputproperty name="encoding" value="UTF-8"/>
			<outputproperty name="indent" value="yes"/>
			<param name="classpath" expression="${eclipse.classpath}"/>
			
		</xslt>
		
	</target>
	
	<!-- ================================= 
	target: prepare directory              
	================================= -->
	
	<target name="prepare" description="准备文件目录路径">
		<mkdir dir="${build.dir}"/>
		<mkdir dir="${build.classes.dir}"/>
		<mkdir dir="${build.classes-test.dir}"/>
		<mkdir dir="${build.test.report}"/>
		<mkdir dir="${dist.dir}"/>
		<mkdir dir="${build.lib.dir}"/>
	</target>
	
	<!-- ================================= 
	target: 抓取依赖包
	================================= -->
	<target name="resolve" description="抓取依赖的包" depends="prepare">
		
		<ivy-configure file="${support.ivy.dir}/ivyconf.xml"/>
		<ivy-retrieve
			pattern="${build.lib.dir}/[conf]/[module]/[artifact]-[revision].[ext]"/>
	</target>
	<target name="taskdef" description="定义依赖包" depends="resolve">
		
		<!--testNG 路径 -->
		<path id="testng.path">
			<fileset dir="${build.lib.dir}/ant" includes="**/testng*.jar"/>
		</path>
		<!--testNG 路径 -->
		<path id="cobertura.path">
			<fileset dir="${support.lib.dir}/cobertura" includes="*.jar"/>
		</path>
		<!-- antlr 路径-->
		<path id="antlr.path">
			<fileset dir="${build.lib.dir}/ant" includes="**/antlr*.jar"/>
		</path>
		<!--　定义任务　-->
		
		<taskdef resource="testngtasks" classpathref="testng.path"/>
		<taskdef resource="tasks.properties" classpathref="cobertura.path"/>
	</target>
	
	<!-- ================================= 
	target: 编译Java文件             
	================================= -->
	<target name="compile" depends="taskdef" description="编译项目">
		<antcall target="compile-offline">
			<param name="debug" value="false"/>
		</antcall>
	</target>
	<target name="beforeCompile"/>
	<target name="compile-offline" description="编译项目">
		<antcall target="beforeCompile"/>
		
		<javac destdir="${build.classes.dir}" fork="true" source="1.5" target="1.5"
			classpathref="build.compile.classpath" encoding="utf-8"
			debug="${debug}">
			<src path="${project.src.java.dir}"/>
			<src path="${antlr.dir}"/>
		</javac>
		<copy todir="${build.classes.dir}">
			<fileset dir="${project.src.resources.dir}"/>
		</copy>
		<antcall target="afterCompile"/>
	</target>
	<target name="afterCompile"/>
	
	<target name="jar" depends="compile">
		<jar jarfile="${dist.dir}/${project.name}.jar"
			basedir="${build.classes.dir}">
			<manifest>
				<attribute name="Corner-Version" value="${project.version}"/>
			</manifest>
		</jar>
	</target>
	<!-- ================================= 
	target: 编译测试的源码
	================================= -->
	<target name="test.compile" depends="compile" description="编译测试的源码">
		<javac srcdir="${project.test.java.dir}"
			destdir="${build.classes-test.dir}" target="1.5" source="1.5"
			nowarn="on" encoding="utf-8">
			<classpath>
				<path refid="build.test.classpath"/>
				<pathelement path="${build.classes.dir}"/>
			</classpath>
		</javac>
		<copy todir="${build.classes-test.dir}">
			<fileset dir="${project.test.resources.dir}">
			</fileset>
		</copy>
	</target>
	<!-- ================================= 
	target: 运行测试用例            
	================================= -->
	<target name="test" depends="test.compile">
		<testng outputDir="${build.test.report}" haltOnFailure="true" verbose="2">
			<classpath>
				<path refid="build.test.classpath"/>
				<pathelement path="${build.classes.dir}"/>
				<pathelement path="${build.classes-test.dir}"/>
			</classpath>
			<classfileset dir="${build.classes-test.dir}"
				includes="**/*Test.class"/>
		</testng>
	</target>
	
	<target name="instrument" depends="clean,taskdef" description="运行字节码增强">
		<antcall target="compile-offline">
			<param name="debug" value="true"/>
		</antcall>
		<cobertura-instrument todir="target/instrumented-classes">
			<fileset dir="${build.classes.dir}">
				<include name="**/*.class"/>
			</fileset>
		</cobertura-instrument>
	</target>
	<target name="cover-test" depends="instrument,test.compile" description="运行测试">
		<mkdir dir="${build.cover.report.dir}"/>
		<testng outputDir="${build.cover.report.dir}" haltOnFailure="true"
			verbose="2">
			<classpath location="target/instrumented-classes"/>
			<classpath>
				<path refid="build.test.classpath"/>
				<pathelement path="${build.classes.dir}"/>
				<pathelement path="${build.classes-test.dir}"/>
			</classpath>
			<classfileset dir="${build.classes-test.dir}"
				includes="**/*Test.class"/>
		</testng>
	</target>
	<target name="coverage-report" depends="cover-test">
		<cobertura-report srcdir="${project.src.java.dir}" destdir="cobertura"/>
	</target>
	<!-- ================================= 
	target: publish              
	================================= -->
	<target name="publish" depends="jar"
		description="--> compile test and publish this project in the local ivy repository">
		<property name="revision" value="${project.version}"/>
		<ivy-publish artifactspattern="${dist.dir}/[artifact].[ext]"
			resolver="shared" pubrevision="${project.version}"
			status="integration"/>
		<echo
			message="project ${ant.project.name} released with version ${project.version}"/>
	</target>
	<target name="install" depends="clean,jar"
		description="--> compile test and publish this project in the local ivy repository">
		
		<tstamp>
			<format property="now" pattern="yyyyMMddHHmmss"/>
		</tstamp>
		<property name="revision" value="${project.version}-${now}"/>
		<ivy-publish artifactspattern="${dist.dir}/[artifact].[ext]"
			resolver="local" pubrevision="${revision}" pubdate="${now}"
			status="integration"/>
		<echo
			message="project ${ant.project.name} released with version ${revision}"/>
	</target>
	<!-- ================================= 
	target: 生成JavaDoc
	================================= -->
		<target name="javadoc" description="创建Javadoc文档">
			<mkdir dir="${dist.dir}/docs/api"/>
			<javadoc sourcepath="${project.src.java.dir}" splitindex="true"
				use="true" version="true" destdir="${dist.dir}/docs/api"
				encoding="utf-8" charset="utf-8" source="1.5" linksource="yes"
				packagenames="corner.*"
				classpathref="build.compile.classpath"
				windowtitle="${ant.project.name} API"
				>
				<doctitle><![CDATA[<h1>${ant.project.name} ${project.version} API</h1>]]></doctitle>
				<bottom><![CDATA[<i>Copyright &#169; 2006-2007 Beijing Maxinfo Technology Ltd. All Rights Reserved.</i>]]></bottom>
			</javadoc>
		</target>
	<!-- ================================= 
	target: 部署
	================================= -->
		<target name="deploy" description="部署jar以及javadoc到目录"  depends="install,javadoc">
			<exec  executable="scp" >
			  <arg line=" -r ${dist.dir} jcai@168.168.168.205:public_html/projs/corner/"/>
			</exec>
		</target>
	
	<!-- ================================= 
	target: 清除              
	================================= -->
	<target name="clean" description="--> clean the project">
		<delete includeemptydirs="true" quiet="true">
			<fileset dir="${build.dir}" includes="**/*"/>
		</delete>
		<delete includeemptydirs="true" quiet="true">
			<fileset dir="${build.lib.dir}">
			</fileset>
		</delete>
	</target>
	
	<!-- ================================= 
	target: clean-cache              
	================================= -->
	<target name="clean-cache" description="--> clean the ivy cache">
		<delete dir="${user.home}/.ivy"/>
	</target>
</project>
